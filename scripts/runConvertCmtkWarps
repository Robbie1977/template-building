#!/bin/bash

waitScript="/groups/saalfeld/home/bogovicj/dev/template/template-building/scripts/waitForLSFJobs.pl"

# Remember where we start
startdir=`pwd`

POSFIELDDIR="/nrs/saalfeld/john/projects/flyChemStainAtlas/posFields"

POSFIELDX=""
POSFIELDY=""
POSFIELDZ=""

# Input arguments
# Try to auto-detect a reference image and directory that stores the
# transformations

doWait=""
doAffine="0"
isNrrd="0"
srcdir=""
ref=""
interval=""

while getopts ":d:r:wi:sn" opt; do
    case $opt in
        d)
            #echo "d triggered $OPTARG" >&2
            srcdir=$OPTARG
            ;;
        r)
            #echo "r triggered $OPTARG" >&2
            ref=$OPTARG
            ;;
        w)
            #echo "r triggered $OPTARG" >&2
            doWait="1"
            ;;
        n)
            #echo "r triggered $OPTARG" >&2
            isNrrd="1"
            ;;
        s)
            #echo "s triggered $OPTARG" >&2
            # Skip affine
            doAffine=""
            ;;
        i)
            #echo "r triggered $OPTARG" >&2
            intervalIn=$OPTARG
            interval=$(echo $intervalIn | sed -e 's/0,0,0://g' -e 's/,/-/g')
            echo "interval: $interval"
            ;;
        /?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done


# Detect which directory to use
if [[ -z $srcdir ]];
then
    echo "srcdir not passed with -d : trying to infer"
    srcdir="$startdir/Registration/warp"
    echo "srcdir: $srcdir"
    if [[ ! -d $srcdir ]];
    then
        echo "Directory Registration/warp not found, exiting"
        exit 1
    fi
else
    echo "srcdir here"
fi

# Try to autodetect a reference
if [[ -z $ref ]];
then
    echo "reference not passed with -r : trying to infer"

    ref=`ls *template*nii`

    lsreturn=`echo $?`
    echo $lsreturn 

    nr=( $ref ) # Make an array
    echo "${#nr[@]}"

    if [[ "$lsreturn" > 0  ]] || [[ ${#nr[@]} > 1 ]];
    then
        echo "too few or too many candidate templates - uh oh"
        exit 2 
    fi
else
    echo "ref here"
fi

echo "REFERENCE: "
echo $ref
ref=`readlink -f $ref`
echo $ref
echo " "

if [[ -z $interval ]];
then
    # Check to make sure that the specified posfield sizes agree with the reference
    interval=$(parseNiiSize $ref | sed -e 's/0,0,0://g' -e 's/,/-/g')
    echo "interval: $interval"
fi

center=$(echo $interval | awk -F '-' 'BEGIN {OFS=","} {print $1/2, $2/2, $3/2}')
echo "center: $center"

if [[ $isNrrd == "0" ]];
then
    POSFIELDX="${POSFIELDDIR}/pfx_$interval.nii"
    POSFIELDY="${POSFIELDDIR}/pfy_$interval.nii"
    POSFIELDZ="${POSFIELDDIR}/pfz_$interval.nii"
else
    POSFIELDX="${POSFIELDDIR}/pfx_$interval.nrrd"
    POSFIELDY="${POSFIELDDIR}/pfy_$interval.nrrd"
    POSFIELDZ="${POSFIELDDIR}/pfz_$interval.nrrd"
fi

echo "pfx: $POSFIELDX"
echo "pfy: $POSFIELDY"
echo "pfz: $POSFIELDZ"


echo " "
echo $srcdir
echo $doWait

if [[ -n $doWait ]];
then
    echo "waiting" 
else
    echo "not waiting" 
fi

cd $srcdir
i=0

for reg in `ls */registration.gz`
do
    echo $reg
    fullpath=`readlink -f $reg`
    ddir=${fullpath%/*} 

    tmp=`readlink -f $reg`
    xfm=`echo $tmp | sed 's/registration.gz/xform.nii/g'`
    out=`echo $tmp | sed 's/registration.gz/xform/g'`
    affine="${out}_affine_itk.txt"
    warp="${out}_warp.nii"
    clean="1"
    echo $xfm
    if [[ -f "${out}.nii" ]];
    then
        echo "skipping job for $out"
    else

        # Make the job scripts
        job="cmtk2dfield_$i.sh"
        echo "#!/bin/bash" > $job
        echo "export CMTK_NUM_THREADS=4" >> $job

        echo "convertCmtkWarpFast $POSFIELDX $POSFIELDY $POSFIELDZ $ref $reg $xfm $clean" >> $job

        if [[ -n $doAffine ]];
        then
            echo "cmtkAffine2Itk $reg $center > $affine" >> $job
            echo "displacementRemoveAffine $warp $out.nii $affine" >> $job
        fi

        ## The old way of doing it
        #echo "affineFromDisplacement $out $xfm 8" >> $job
        #echo "affineImglib2Itk ${out}_affine.txt > ${out}_affine_itk.txt" >> $job 
        chmod +x $job
    fi

    ((i++))
done

# Submit the jobs and wait
if [ $doWait ];
then
    echo "submit the jobs and wait"
    subJobs -o '-n 4 -R"affinity[core(1)]"' -w cmtk2dfield_*sh
else
    echo "submit the jobs and return"
    subJobs -o '-n 4 -R"affinity[core(1)]"' cmtk2dfield_*sh
fi

# Back to where we started
cd $startdir

