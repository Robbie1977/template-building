#!/bin/bash
# runDistXfmEvalComp
# Estimates distance between two skeletons using distance transforms.
# Does this for all pairs of skeletons belonging to the same gal4 line
# and dumps the raw data to a text file

PAIRLIST="/nrs/saalfeld/john/projects/flyChemStainAtlas/eval/prefix_list_by_neuron.txt"
IMGDIR="/nrs/saalfeld/john/projects/flyChemStainAtlas/eval/dataNew"

prefixPattern="\(201[6-7][0-9]\{4\}\_[0-9][0-9]_[A-Z][0-9]\).*"
deletePattern="s/_Scope_.*$//g"

template="$1"
compartments="$2"

outputres="0.5,0.5,0.5"
if [[ $# -ge 3 ]];
then
    outputres="$3"
fi
echo "outputres: $outputres"

toNormSpaceXfm=""
if [[ $# -ge 4 ]];
then
    toNormSpaceXfm="$4"
fi
echo "toNormSpaceXfm: $toNormSpaceXfm"

realInterval=""
if [[ $# -ge 5 ]];
then
    realInterval="$5"
fi
echo "toNormSpaceXfm: $toNormSpaceXfm"

destDirectory="evalCompWarpNorm"
if [[ $# -ge 6 ]];
then
    destDirectory="$6"
fi
echo "destDirectory: $destDirectory"

## This doesn't do anything anymore
#res=$(templateResolution $template)
#echo "RESOLUTION: $res"

isCmtk=""
if [[ -d Registration ]];
then
    echo "is CMTK"
    isCmtk="1"
fi

isElastix=""
numElastix=$(ls */elastix.log | wc -l)
if [[ $numElastix > 0 ]];
then
    isElastix="1"
fi

regdir=`pwd`
mkdir -p $destDirectory
cd $destDirectory


dstdir=`pwd`
#echo "now in dir: $dstdir"

# Transform
function transform {
# TODO detect whether this is cmtk, ants, or elastix, and transform appropriately

    imglist=`ls $IMGDIR/*C2*Skeleton.tif`
    #echo " "

    echo "template: $template"

    if [[ -z $realInterval ]];
    then

        interval=$(parseNiiSize $template)
        echo "interval: $interval"

        templateRes=$(parseNiiRes $template)
        echo "template resolution: $templateRes"

        realInterval=$(changeIntervalRes $interval $templateRes $outputres) 
    fi
    echo "real output interval: $realInterval"

    i=0
    for img in $imglist
    do
        name="${img##*/}"
        out="$dstdir/${name}_xfm.tif"

        #prefix=`echo "$name" | sed "s/$prefixPattern/\1/g"`
        prefix=`echo "$name" | sed $deletePattern`
        echo "prefix: $prefix"

        if [ -f $out ]; then
            echo "Exists, skipping $out"
            continue
        fi

        resXfm=$(findResolutionXfm $regdir)

        midResXfm=""
        tmp="$regdir/midResXfm.txt"
        if [[ -f $tmp ]]; then
            midResXfm="$tmp"
        fi

        if [[ -n $isCmtk ]];
        then
            echo "really is CMTK"
            xfmList="-i `ls $IMGDIR/${prefix}*down.txt | grep -v Neuron`"

            if [[ ! -z $midResXfm ]]; then
                xfmList="$xfmList $midResXfm"
            fi
            xfmList="$xfmList `matchEvalDataCmtk --conv $prefix $regdir`"

            if [[ $toNormSpaceXfm ]]; then
                xfmList="$xfmList $toNormSpaceXfm"
            fi

            if [[ $resXfm ]]; then
                xfmList="$xfmList -i $resXfm"
            fi

            echo " "
            echo "xfmList"
            echo "$xfmList"
            echo " "

            echo "transforming $img"
            echo "renderTransformed $img $out $realInterval $xfmList -q 8 -r $outputres" > skel_xfm_$i.sh
            renderTransformed $img $out $realInterval $xfmList -q 8 -r $outputres
            
        elif [[ -n $isElastix ]];
        then

            # Elastix
            echo "elastix"

            xfmList="-i `ls $IMGDIR/${prefix}*down.txt | grep -v Neuron`"

            if [[ ! -z $midResXfm ]]; then
                xfmList="$xfmList $midResXfm"
            fi

            if [[ $resXfm ]]; then
                xfmList="$xfmList -i $resXfm"
            fi

            xfmList="$xfmList `matchEvalDataElastix $prefix $regdir`"

            if [[ $toNormSpaceXfm ]]; then
                xfmList="$xfmList $toNormSpaceXfm"
            fi


            echo "transforming $img"
            echo "renderTransformed $img $out $realInterval $xfmList -q 8 -r $outputres" > skel_xfm_$i.sh
            renderTransformed $img $out $realInterval $xfmList -q 8 -r $outputres

        else
            xfmList="-i `ls $IMGDIR/${prefix}*down.txt | grep -v Neuron`"

            if [[ ! -z $midResXfm ]]; then
                xfmList="$xfmList $midResXfm"
            fi

            echo "PREFIX: $prefix"

            if [[ $resXfm ]]; then
                xfmList="$xfmList -i $resXfm"
            fi

            xfmList="$xfmList -i `matchEvalData $prefix $regdir`"

            if [[ $toNormSpaceXfm ]]; then
                xfmList="$xfmList $toNormSpaceXfm"
            fi


            echo "$xfmList"

            echo "transforming $img"
            echo "renderTransformed $img $out $realInterval $xfmList -q 8 -r $outputres" > skel_xfm_$i.sh
            chmod +x skel_xfm_$i.sh

            renderTransformed $img $out $realInterval $xfmList -q 8 -r $outputres
        fi
        ((i++))
    done


}

function distanceTransforms {
   
    for im in `ls *Skeleton.tif_xfm.tif`
    do
        #echo "computing DT for $im"
        dist_im="${im}_distXfm.tif"
        dist_im_path="$dstdir/$dist_im"

        # Some experiments of mine double-up the 'distXfm' suffix :(
        # So detect anything with that suffix here for skipping
        N=$(ls -U ${im}*distXfm.tif | wc -l)

        echo "dist im: $dist_im"

        if [[ $N > 0 ]];
        then
            echo "skipping DT for $im - already exists"
        else
            echo "distance transform of $im"
            echo $dist_im_path
            ## Grabs resolution from the input image
            runDistanceTransform "$dstdir/$im" "$dstdir/$dist_im"
        fi
    done
}

function pairwiseEval {
    dts=`ls -1 *distXfm.tif | tr '\n' ' '`
    #echo "$dts"
    pairs $dts > pairs
    dir=$(pwd)

    i=0
    while read line
    do
        #echo "$line"
        a=`echo "$line" | cut -d' ' -f1`
        b=`echo "$line" | cut -d' ' -f2`
        aim=`echo $a | sed 's/_distXfm.tif//g'`
        bim=`echo $b | sed 's/_distXfm.tif//g'`

        echo "$aim"
        echo "$bim"
        echo "$a"
        echo "$b"

        sameNeuron=`areSameNeuron $aim $bim`
        echo "$sameNeuron"
        suffix="DIFF"
        # ONLY COMPUTE DISTANCE TRANSFORMS FOR PAIRS BELONGING TO THE
        # SAME LINE
        if [[ "$sameNeuron" == "1" ]];
        then
            suffix="SAME"
            echo "suffix: $suffix"
            job="distDataCompEvalJob_$i.sh"
            echo "#!/bin/bash" > $job
            echo "distDataPairComp $dir/$aim $dir/$bim $dir/$a $dir/$b $compartments $suffix" >> $job
            chmod +x $job
            ((i++))
        fi

        echo " "
        echo " "
    done <pairs

    # submit all the jobs
    echo "submitting jobs"
    subJobs -w -o '-n 2' distDataCompEvalJob*sh
}

# Transform everything
transform

distanceTransforms

pairwiseEval

combineDataByLine "labelData"

## Organize statistics by label
distXfmLabelStats


## Some brief analysis
#labellist=$(uniqueLabels $compartments)
#echo $labellist
#for label in $labellist;
#do
#    echo $label
#    combineDataByLine "_labelData_$label"
#done
#
#for hf in `ls combined__labelHist*line*csv`
#do
#    echo $hf
#    out=`echo $hf | sed 's/.csv/_stats.csv/g'`
#    echo $out
#
#    histStat $hf 0.01 0.05 0.1 0.25 0.5 0.75 0.9 0.95 0.99 > $out
#    plotHistograms $hf
#done

cd ..
