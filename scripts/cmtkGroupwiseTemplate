#!/bin/bash
# Generates a groupwise template using cmtk for registration, and
# ants-like shape averaging.
#
 
waitScript="/groups/saalfeld/home/bogovicj/dev/template/template-building/scripts/waitForLSFJobs.pl"

script="/groups/saalfeld/home/bogovicj/dev/jefferislab/AnalysisSuiteBin/munger.pl"
bindir="/misc/local/cmtk-3.1.0/lib/cmtk/bin"

ref="starting-template.nii"
nThreads="4"

nIters="4"
gradientstep="0.25"

currentIter="0"
currentTemplate="$ref"


function find_current_iter {

    lastTemplate=`ls average-template*.nii | sort | tail -n 1`

    if [[ $lastTemplate ]];
    then
        currentTemplate="$lastTemplate"    

        # Update currentIter
        # Find the last complete average template, and increment 
        currentIter=`echo $lastTemplate | sed -e 's/average-template_//g' -e 's/.nii//g'`
        ((currentIter++))
    else
        echo "using the starting template"
    fi
}

function shapeupdate {

    # Variables that are constant for the moment, but I may change in
    # the future
    dim=3 
    templatename="average-template"
    template="average-template.nii"
    afftype=".txt"

    echo
    echo "--------------------------------------------------------------------------------------"
    echo " shape update - Compute average warp "
    echo "--------------------------------------------------------------------------------------"
    ${ANTSPATH}/AverageImages $dim ${templatename}Warp.nii.gz 0 `ls Registration/warp/*/xform.nii`
	${ANTSPATH}/MultiplyImages $dim ${templatename}Warp.nii.gz ${gradientstep} ${templatename}Warp.nii.gz

    echo
    echo "--------------------------------------------------------------------------------------"
    echo " shape update - Compute average affine "
    echo "--------------------------------------------------------------------------------------"
    ${ANTSPATH}/AverageAffineTransform ${dim} ${templatename}Affine${afftype} ./Registration/warp/*/xformAffine.txt

    echo
    echo "--------------------------------------------------------------------------------------"
    echo " shape update - Update warps "
    echo "--------------------------------------------------------------------------------------"
    ${ANTSPATH}/WarpImageMultiTransform ${dim} ${templatename}Warp.nii.gz ${templatename}Warp.nii.gz -i  ${templatename}Affine${afftype} -R ${template}

    echo
    echo "--------------------------------------------------------------------------------------"
    echo " shape update - Transform template "
    echo "--------------------------------------------------------------------------------------"
    ${ANTSPATH}/WarpImageMultiTransform ${dim} ${template} ${template} -i ${templatename}Affine${afftype} ${templatename}Warp.nii.gz ${templatename}Warp.nii.gz ${templatename}Warp.nii.gz ${templatename}Warp.nii.gz -R ${template}

}

function singleRegistrations {

jobIds=""

i=0
for f in `ls images/*nii`
do
    echo $f
    job="cmtkReg_$i.sh"

    echo "#!/bin/bash" > $job 
    echo "$script -b "$bindir" -e nii -v -aw -X 26 -C 8 -G 80 -R 4 -A '--accuracy 0.4' -W '--accuracy 0.4' -T $nThreads -s $currentTemplate $f" >> $job
    chmod +x $job
    sleep 1

    # the output of bsub is something like "Job <53135> is submitted to default queue <normal>."
    # the awk command below grabs the jobid without the brackets
    id=`bsub -n $nThreads -o $job.o%J -e $job.e%J "./$job" | awk '{ gsub("[<>]","",$2); print $2}'`
    sleep 1
    jobIds="$jobIds $id"
    sleep 1
 
    ((i++))
done

sleep 2
# Wait for all the jobs to finish
$waitScript 1 60 $jobIds

}

function genAverageTemplateLSF {
    avgTemplateJob="avgTemplate_$currentIter.sh" 
    echo "#!/bin/bash" > $avgTemplateJob
    echo "cmtkWarpAverage $ref 4" >> $avgTemplateJob # Use 4 threads
    chmod +x $avgTemplateJob
    bsub -n 4 -o $avgTemplateJob.o%J -e $avgTemplateJob.e%J "./$avgTemplateJob"
}

function backup {
    
    echo "backing up iteration $currentIter"

    # Make backup directory
    bak_dir="Iter_$currentIter"
    mkdir -p $bak_dir
   
    mv cmtkReg*sh* $bak_dir
    mv *deformed.nii.gz $bak_dir
    mv Registration $bak_dir 
    mv average-templateWarp* $bak_dir
    mv average-templateAffine* $bak_dir

}

# See if this was interrupted before, and start from where this left off
find_current_iter

echo "ref: $currentTemplate"

thisdir=`pwd`

while [[ $currentIter < $nIters ]];
do
    echo "current iteration : $currentIter"
    echo "current template  : $currentTemplate"
    sleep 1

    singleRegistrations

    #cmtkWarpAverage $ref
    genAverageTemplateLSF

    # Convert the cmtk transformations
    srcdir="${thisdir}/Registration/warp"
    ref="${thisdir}/average-template.nii"
    cmtkAverageTransformationLSF $srcdir $ref "ants"
 
    # Warp the average shape
    shapeupdate

    mv average-template.nii average-template_$currentIter.nii
    backup

    currentTemplate="average-template_$currentIter.nii"
    ((currentIter++))
done

